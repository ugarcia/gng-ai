// Generated by CoffeeScript 1.6.3
(function() {
  window.EnemyAI = (function() {
    EnemyAI.levels = {
      BASIC: 0,
      REAL: 1,
      IMPOSSIBLE: 2
    };

    EnemyAI.prototype.states = null;

    EnemyAI.prototype.state = null;

    EnemyAI.prototype.level = null;

    EnemyAI.prototype.attackCycle = [];

    EnemyAI.prototype.lastAttackState = null;

    EnemyAI.prototype.actionTimeout = 0;

    EnemyAI.prototype.maxHealth = 0;

    EnemyAI.prototype.obj = null;

    EnemyAI.prototype.eye = null;

    EnemyAI.prototype.weapon = null;

    EnemyAI.prototype.target = null;

    function EnemyAI(obj, target, level) {
      this.obj = obj;
      this.target = target;
      this.level = level;
      this.init();
    }

    EnemyAI.prototype.getState = function() {
      return this.state;
    };

    EnemyAI.prototype.setState = function(state) {
      this.state = state;
      return this.obj.runtime.trigger(this.obj.ai.behavior.cnds.OnStateChanged, this.obj);
    };

    EnemyAI.prototype.getObj = function() {
      return this.obj;
    };

    EnemyAI.prototype.setObj = function(obj) {
      this.obj = obj;
    };

    EnemyAI.prototype.getTarget = function() {
      return this.target;
    };

    EnemyAI.prototype.setTarget = function(target) {
      this.target = target;
    };

    EnemyAI.prototype.getLevel = function() {
      return this.level;
    };

    EnemyAI.prototype.setLevel = function(level) {
      this.level = level;
    };

    EnemyAI.prototype.getAttackDistance = function() {
      return this.attackDistance;
    };

    EnemyAI.prototype.setAttackDistance = function(attackDistance) {
      this.attackDistance = attackDistance;
    };

    EnemyAI.prototype.getEye = function() {
      return this.eye;
    };

    EnemyAI.prototype.setEye = function(eye) {
      this.eye = eye;
      return this.obj.lineOfSight = getElementByKeyValue(this.eye.behavior_insts, 'type.name', 'LineOfSight');
    };

    EnemyAI.prototype.getWeapon = function() {
      return this.weapon;
    };

    EnemyAI.prototype.setWeapon = function(weapon) {
      this.weapon = weapon;
    };

    EnemyAI.prototype.init = function() {
      this.state = this.states.SEEKING;
      this.lastAttackState = this.attackCycle[0];
      this.maxHealth = this.obj.instance_vars[0];
      if (!this.eye) {
        this.setEye(this.obj);
      }
      if (!this.weapon) {
        return this.setWeapon(this.obj);
      }
    };

    EnemyAI.prototype.inShootRange = function() {};

    EnemyAI.prototype.nextAttackState = function() {
      var i, _i, _ref;
      this.lastAttackState = this.attackCycle[Math.floor(this.attackCycle.length * Math.random())];
      for (i = _i = 0, _ref = this.attackCycle.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.attackCycle[i] === this.lastAttackState) {
          return this.attackCycle[(i + 1) % this.attackCycle.length];
        }
      }
    };

    EnemyAI.prototype.update = function(dt) {
      return this.actionTimeout -= dt;
    };

    return EnemyAI;

  })();

}).call(this);
